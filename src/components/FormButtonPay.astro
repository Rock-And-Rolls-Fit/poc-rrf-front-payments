---
import { Button } from "@/components/ui/button";
import BankCard from "@/components/BankCard.astro";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { BankCodeSecurity } from "@/components/BankCodeSecurity";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Banknote } from "@lucide/astro";
import { banks } from "@/constants";

const { token, userId, buyOrderId, price, productName, description, userData } =
  Astro.props;
---

<form class="grid md:grid-cols-2 gap-4 md:px-52 md:py-20 py-10">
  <div class="md:pb-16 space-y-4">
    <p class="text-xl font-semibold">Por favor selecciona tu banco</p>
    <input type="hidden" name="token" value={token} />
    <input type="hidden" name="userId" value={userId} />
    <input type="hidden" name="buyOrderId" value={buyOrderId} />
    <input type="hidden" name="price" value={price} />
    <div class="md:h-1/2 overflow-auto">
      <div class="grid grid-cols-2 md:grid-cols-3 gap-4 p-1.5">
        {
          banks.map((bank) => (
            <BankCard id={bank.code} value={bank.code} name={bank.name} />
          ))
        }
      </div>
    </div>
  </div>
  <div class="space-y-4 md:px-12">
    <p class="text-xl font-semibold">Detalles de pago</p>
    <Card>
      <CardContent className="flex flex-col gap-4">
        <div class="flex flex-col gap-2">
          <h2 class="text-xl font-bold uppercase">Plan: {productName}</h2>
          <p class="text-sm text-gray-500">{description}</p>
        </div>
        <span class="font-bold">Monto: ${price}</span>
        <hr />
        <div class="flex flex-col gap-2">
          <Label>Código de seguridad</Label>
          <div class="flex flex-row justify-center">
            <BankCodeSecurity client:visible />
          </div>
        </div>
        <div class="flex flex-col gap-2">
          <Label>Número de teléfono</Label>
          <Input
            type="tel"
            placeholder="Phone Number"
            name="phoneNumber"
            required
            defaultValue={userData?.privateMetadata.phoneNumber as string}
          />
        </div>
        <div class="flex flex-col gap-2">
          <Label>Cédula de identidad</Label>
          <Input
            type="text"
            placeholder="V012340163"
            name="taxDocument"
            required
            defaultValue={userData?.privateMetadata.taxDocumentId as string}
          />
        </div>
      </CardContent>
      <CardFooter>
        <Button className="w-full"><Banknote /> Pagar</Button>
      </CardFooter>
    </Card>
  </div>
</form>

<script>
  import { ROUTES } from "@/constants";
  const TAX_DOCUMENT_REGEXP = /^[VE]\d{7,9}$/;
  const form = document.querySelector("form") as HTMLFormElement;
  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    // Get the form data
    const formData = new FormData(form);

    // Get hidden input values
    const token = formData.get("token") as string;
    const userId = formData.get("userId") as string;
    const price = formData.get("price") as string;
    const buyOrderId = formData.get("buyOrderId") as string;

    // Get selected bank
    const selectedBank = document.querySelector(
      'input[name="bank"]:checked'
    ) as HTMLInputElement;
    const bankCode = selectedBank ? selectedBank.value : null;
    const phoneNumber = formData.get("phoneNumber") as string;
    const bankCodeSecurity = formData.get("bankCodeSecurity") as string;
    const taxDocument = formData.get("taxDocument") as string;

    if (!bankCode) {
      alert("Please select a bank");
      return;
    }

    const upperValue = taxDocument.toUpperCase();

    if (!taxDocument) {
      alert("Please enter a tax document id");
      return;
    }

    if (upperValue.length <= 10) {
      if (TAX_DOCUMENT_REGEXP.test(upperValue)) {
        console.log("Válido:", upperValue);
      } else {
        alert("Tax Document Id is invalid");
        return;
      }
    }
    const result = await fetch(ROUTES.SEND_PAYMENT_BUTTON_PAY, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId,
        taxDocumentId: taxDocument,
        phoneNumber,
        bankCode,
        token: bankCodeSecurity,
        amount: price,
        securityId: token,
        buyOrderId,
      }),
    });

    if (!result.ok) {
      window.location.href = "/transaction-failed";
      return;
    }

    const response = await result.json();

    const reference = response.reference;
    const buyOrder = response.buyOrderId;

    window.location.href = `/success?operation=${reference}&buy-order=${buyOrder}`;
  });
</script>
