---
import { Button } from "@/components/ui/button";
import BankCard from "@/components/BankCard.astro";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from "@/components/ui/card";
import { BankCodeSecurity } from "@/components/BankCodeSecurity";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Banknote } from "@lucide/astro";
import { banks } from "@/constants";
import { TokenModal } from "@/components/TokenModal";

const {
  token,
  userId,
  buyOrderId,
  price,
  productName,
  description,
  userData,
  priceExchange,
  value,
  dateValue,
} = Astro.props;

const subTotal = Number(priceExchange);
const iva = parseFloat((subTotal * 0.16).toFixed(2));
const total = parseFloat((subTotal + iva).toFixed(2));
---

<form class="grid md:grid-cols-2 gap-4 md:px-52 md:py-20 py-10">
  <div class="md:pb-16 space-y-4">
    <p class="text-xl font-semibold">Por favor selecciona tu banco</p>
    <input type="hidden" name="token" value={token} />
    <input type="hidden" name="userId" value={userId} />
    <input type="hidden" name="buyOrderId" value={buyOrderId} />
    <input type="hidden" name="price" value={price} />
    <input type="hidden" name="priceExchange" value={priceExchange} />
    <input type="hidden" name="valueExchange" value={value} />
    <input type="hidden" name="dateValueExchange" value={dateValue} />
    <div class="md:h-1/2 overflow-auto">
      <div class="grid grid-cols-2 md:grid-cols-3 gap-4 p-1.5">
        {
          banks.map((bank) => (
            <BankCard id={bank.code} value={bank.code} name={bank.name} />
          ))
        }
      </div>
    </div>
  </div>
  <div class="space-y-4 md:px-12">
    <Card>
      <CardHeader>
        <h1 class="text-2xl font-semibold text-center">Detalles de pago</h1>
        <p class="text-sm text-muted-foreground">
          Ingresa los datos de tu pago para continuar con el proceso de inscripción.
        </p>
      </CardHeader>
      <CardContent className="flex flex-col gap-4">
        <div class="p-4 bg-muted/5 rounded-lg">
          <h2 class="text-lg font-semibold mb-3">Detalles del Producto</h2>
          <div class="space-y-2">
            <div class="flex md:justify-between max-md:gap-2">
              <span class="text-muted-foreground">Producto:</span>
              <span class="font-medium">{productName}</span>
            </div>
            <div class="flex md:justify-between max-md:gap-2">
              <span class="text-muted-foreground">Descripción:</span>
              <span class="font-medium">{description}</span>
            </div>
            <div class="flex md:justify-between max-md:gap-2">
              <span class="text-muted-foreground">Sub Total:</span>
              <span class="font-medium">
                VES{" "}
                {
                  `${Intl.NumberFormat("es-VE").format(
                    Number(subTotal)
                  )} | $${price}`
                }
              </span>
            </div>
            <div class="flex md:justify-between max-md:gap-2">
              <span class="text-muted-foreground">IVA:</span>
              <span class="font-medium">
                {`${Intl.NumberFormat("es-VE").format(Number(iva))}`}
              </span>
            </div>
            <div class="flex md:justify-between max-md:gap-2">
              <span class="text-muted-foreground">Total:</span>
              <span class="font-medium">
                VES {`${Intl.NumberFormat("es-VE").format(Number(total))}`}
              </span>
            </div>
          </div>
        </div>
        <div class="text-sm text-muted-foreground md:flex md:flex-row gap-2">
          <div class="space-x-1 text-center">
            <span>Valor de tasa de cambio</span>
            <span class="font-bold text-gray-700">
              {Intl.NumberFormat("es-VE").format(Number(value))}
            </span>
          </div>
          <div class="space-x-1 text-center">
            <span>según Banco Central de Venezuela el</span>
            <span class="font-bold text-gray-700">
              {dateValue}
            </span>
          </div>
        </div>
        <hr />
        <div class="flex flex-col gap-2">
          <Label>Token de seguridad</Label>
          <div class="flex flex-row justify-center">
            <BankCodeSecurity client:visible />
          </div>
        </div>
        <div class="flex flex-col gap-2">
          <Label>Número de teléfono</Label>
          <Input
            type="tel"
            placeholder="Phone Number"
            name="phoneNumber"
            required
            defaultValue={userData?.privateMetadata.phoneNumber as string}
          />
        </div>
        <div class="flex flex-col gap-2">
          <Label>Cédula de identidad</Label>
          <Input
            type="text"
            placeholder="V012340163"
            name="taxDocument"
            required
            defaultValue={userData?.privateMetadata.taxDocumentId as string}
          />
        </div>
      </CardContent>
      <CardFooter>
        <Button className="w-full"><Banknote /> Pagar</Button>
      </CardFooter>
    </Card>
  </div>
</form>

<TokenModal client:load id="token-modal" />

<script>
  import { ROUTES } from "@/constants";
  const TAX_DOCUMENT_REGEXP = /^[VE]\d{7,9}$/;
  const form = document.querySelector("form") as HTMLFormElement;
  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    // Get the form data
    const formData = new FormData(form);

    // Get hidden input values
    const token = formData.get("token") as string;
    const userId = formData.get("userId") as string;
    const price = formData.get("price") as string;
    const buyOrderId = formData.get("buyOrderId") as string;
    const priceExchange = formData.get("priceExchange") as string;
    const valueExchange = formData.get("valueExchange") as string;
    const dateValueExchange = formData.get("dateValueExchange") as string;

    // Get selected bank
    const selectedBank = document.querySelector(
      'input[name="bank"]:checked'
    ) as HTMLInputElement;
    const bankCode = selectedBank ? selectedBank.value : null;
    const phoneNumber = formData.get("phoneNumber") as string;
    const bankCodeSecurity = formData.get("bankCodeSecurity") as string;
    const taxDocument = formData.get("taxDocument") as string;

    if (!bankCode) {
      alert("Please select a bank");
      return;
    }

    const upperValue = taxDocument.toUpperCase();

    if (!taxDocument) {
      alert("Please enter a tax document id");
      return;
    }

    if (upperValue.length <= 10) {
      if (TAX_DOCUMENT_REGEXP.test(upperValue)) {
        console.log("Válido:", upperValue);
      } else {
        alert("Tax Document Id is invalid");
        return;
      }
    }
    const result = await fetch(ROUTES.SEND_PAYMENT_BUTTON_PAY, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId,
        taxDocumentId: taxDocument,
        phoneNumber,
        bankCode,
        token: bankCodeSecurity,
        amount: price,
        securityId: token,
        buyOrderId,
        priceExchange,
        valueExchange,
        dateValueExchange,
      }),
    });

    if (!result.ok) {
      window.location.href = "/transaction-failed";
      return;
    }

    const response = await result.json();

    const reference = response.reference;
    const buyOrder = response.buyOrderId;

    window.location.href = `/success?operation=${reference}&buy-order=${buyOrder}`;
  });
</script>
